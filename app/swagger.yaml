openapi: 3.0.0
info:
  title: My REST API
  version: 1.0.0
  description: A REST API to manage projects, tasks, teams, and users.
servers:
  - url: http://localhost:3000/
    description: Localhost development server
  - url: https://p-manager-backend.onrender.com
    description: Live server on Render
  - url: https://project-m.dk
    description: Live server on domain

components:
  schemas:
    objectId:
      type: string
      pattern: '^[0-9a-fA-F]{24}$'
    Task:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        column:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Team:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        username:
          type: string
        users:
          type: array
          items:
            type: string
        owner:
          type: string
    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        profile_image:
          type: string
        skills:
          type: array
          items:
            type: string

paths:

  # Auth routes
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                username:
                  type: string
                  required: true
                  unique: true
                  lowercase: true
                mobile:
                  type: string
                  required: true
                  unique: true
                roles:
                  type: array
                  items:
                    type: string
                  default:
                    - "USER"
                email:
                  type: string
                  required: true
                  unique: true
                  lowercase: true
                password:
                  type: string
                  required: true
                confirm_password:
                  type: string
                  required: true
                  description: Should match the password field
                profile_image:
                  type: string
                  required: false
                skills:
                  type: array
                  items:
                    type: string
                  default: []
                teams:
                  type: array
                  items:
                    type: string
                    format: ObjectId
                  default: []
      responses:
        200:
          description: User successfully registered
        400:
          description: Bad request


  /auth/login:
    post:
      summary: Log in a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  required: true
                  unique: true
                  lowercase: true
                password:
                  type: string
                  required: true
      responses:
        200:
          description: User successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        format: ObjectId
                      username:
                        type: string
                      email:
                        type: string
                      roles:
                        type: array
                        items:
                          type: string
        400:
          description: Bad request
        401:
          description: Unauthorized

# Project routes

  /project/create:
    post:
      summary: Create a new project
      description: Creates a new project
      schema:
        type: string
      tags:
        - Project
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  required: true
                description:
                  type: string
                image:
                  type: string
                  format: binary
                tags:
                  type: string
      responses:
        201:
          description: The project has been successfully created
        400:
          description: Bad request


  /project/list:
    get:
      summary: Get a list of all projects
      tags:
        - Project
      responses:
        200:
          description: A list of all projects

  /project/{id}:
    get:
      summary: Get a specific project by ID
      tags:
        - Project
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The project ID
      responses:
        200:
          description: The project with the specified ID
        404:
          description: Project not found

  /project/remove/{id}:
    delete:
      summary: Remove a project by ID
      tags:
        - Project
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The project ID
      responses:
        200:
          description: The project has been successfully removed
        404:
          description: Project not found

  /project/edit/{id}:
    put:
      summary: Update a project by ID
      tags:
        - Project
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The project ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: The project has been successfully updated
        404:
          description: Project not found

  /project/edit-projectImage/{id}:
    patch:
      summary: Update a project's image by ID
      tags:
        - Project
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The project ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        200:
          description: The project's image has been successfully updated
        404:
          description: Project not found


# task routes

  /project/{projectId}/tasks/create:
    post:
      tags:
        - Tasks
      summary: Create a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                columnId:
                  type: string
      responses:
        201:
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: Failed to create task
        404:
          description: Column not found

  /project/{projectId}/tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Get a task by its ID
      parameters:
        - in: path
          name: projectId
          schema:
            type: string
          required: true
          description: The ID of the project
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: The ID of the task to be retrieved
      responses:
        200:
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          description: Task not found

  /project/{projectId}/tasks/{taskId}/update:
    put:
      tags:
        - Tasks
      summary: Update a task
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: The ID of the task to be updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        200:
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          description: Task not found

  /project/{projectId}/tasks/{taskId}/delete:
    delete:
      tags:
        - Tasks
      summary: Delete a task
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: The ID of the task to be deleted
      responses:
        200:
          description: Task deleted successfully
        404:
          description: Task not found

  /project/{projectId}/tasks/{taskId}/update-column:
    put:
      tags:
        - Tasks
      summary: Update the column of a task
      parameters:
        - in: path
          name: taskId
          schema:
            type: string
          required: true
          description: The ID of the task whose column is to be updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                columnId:
                  type: string
      responses:
        200:
          description: Task column updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          description: Task not found


# team routes

  /team/create:
    post:
      summary: Create a new team
      operationId: createTeam
      tags:
        - Teams
      requestBody:
        required: true
        content:
          application/json: 
            schema:
              type: object
              required:
                - name
                - description
                - users
              properties:
                name:
                  type: string
                description:
                  type: string
                users:
                  type: array
                  items:
                    type: string
                  description: Array of user ID's
      responses:
        201:
          description: The team was successfully created
        500:
          description: Creating the team encountered a problem


  /team/list:
    get:
      summary: Get a list of all teams
      operationId: getListOfTeam
      tags:
        - Teams
      responses:
        200:
          description: A list of all teams
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Team'

  /team/me:
    get:
      summary: Get the current user's teams
      operationId: getMyTeams
      tags:
        - Teams
      responses:
        200:
          description: A list of the user's teams
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Team'

  /team/invite/{teamID}/{username}:
    get:
      summary: Invite a user to a team
      operationId: inviteUserToTeam
      tags:
        - Teams
      parameters:
        - in: path
          name: teamID
          type: string
          required: true
        - in: path
          name: username
          type: string
          required: true
      responses:
        200:
          description: The request was successfully registered
        400:
          description: The user you are trying to invite to the team was not found or has already been invited

  /team/{id}:
    get:
      summary: Get a specific team by ID
      operationId: getTeamById
      tags:
        - Teams
      parameters:
        - in: path
          name: id
          type: string
          required: true
      responses:
        200:
          description: The requested team
          schema:
            $ref: '#/components/schemas/Team'
        404:
          description: No team was found
  /team/remove/{id}:
    delete:
      summary: Remove a team by ID
      operationId: removeTeamById
      tags:
        - Teams
      parameters:
        - in: path
          name: id
          type: string
          required: true
      responses:
        200:
          description: The team was successfully deleted
        404:
          description: No team was found
        500:
          description: The team was not deleted. Please try again

  /team/update/{teamID}:
    put:
      summary: Update an existing team
      description: Updates a team with the specified teamID and data in the request body
      tags:
        - Teams
      parameters:
        - in: path
          name: teamID
          schema:
            type: string
          required: true
          description: The ID of the team to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                users:
                  type: array
                  items:
                    type: string
                  description: Array of user ID's
              example:
                name: New Team Name
                description: This is a new description for the team
                users: usernames of users as string
      responses:
        200:
          description: The team was successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: The update was successful
        404:
          description: No team was found with these specifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No team was found with these specifications
        500:
          description: The update of team information was not successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: The update of team information was not successful


  # user routes

  /user/profile:
    get:
      tags:
        - User
      summary: Get user profile
      responses:
        200:
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  success:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
                    type: object
                    properties:
                      # Add user properties here
    post:
      tags:
        - User
      summary: Edit user profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                skills:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Successfully updated user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  success:
                    type: boolean
                  message:
                    type: string

  /user/profile-image:
    post:
      tags:
        - User
      summary: Upload user profile image
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        200:
          description: Successfully uploaded user profile image
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  success:
                    type: boolean
                  message:
                    type: string


  
